/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FarmingPoolInterface extends utils.Interface {
  contractName: "FarmingPool";
  functions: {
    "_FTUser(address,uint256)": FunctionFragment;
    "_NFTPool(uint256)": FunctionFragment;
    "_TokenBNBUser(address)": FunctionFragment;
    "_TokenBUSDUser(address)": FunctionFragment;
    "__FarmingInit(address,address,address,address,address,address,address)": FunctionFragment;
    "addFarmingBNBPool(uint256)": FunctionFragment;
    "addFarmingBUSDPool(uint256)": FunctionFragment;
    "addMiningPool(uint256,uint256)": FunctionFragment;
    "badgeContract()": FunctionFragment;
    "busd()": FunctionFragment;
    "createMiningPool(uint256,uint256)": FunctionFragment;
    "distributor()": FunctionFragment;
    "estimateFarmingBNBPoolReward()": FunctionFragment;
    "estimateFarmingBUSDPoolReward()": FunctionFragment;
    "estimateMiningPoolReward(address,uint256)": FunctionFragment;
    "estimateRefMiningReward(uint256,uint256)": FunctionFragment;
    "harvestFarmingBNBPoolReward()": FunctionFragment;
    "harvestFarmingBUSDPoolReward()": FunctionFragment;
    "harvestMiningPoolReward(uint256)": FunctionFragment;
    "ico()": FunctionFragment;
    "lastMiningClaim(address,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "refDistributor()": FunctionFragment;
    "removeFarmingBNBPool(uint256)": FunctionFragment;
    "removeFarmingBUSDPool(uint256)": FunctionFragment;
    "removeMiningPool(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFarmingBNBPool(uint256,uint256,uint256)": FunctionFragment;
    "setFarmingBUSDPool(uint256,uint256,uint256)": FunctionFragment;
    "setMiningInfo(address,address,address,address,address,address,address)": FunctionFragment;
    "tokenA()": FunctionFragment;
    "tokenB()": FunctionFragment;
    "tokenBNBPool()": FunctionFragment;
    "tokenBUSDPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_FTUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_NFTPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_TokenBNBUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_TokenBUSDUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "__FarmingInit",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addFarmingBNBPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFarmingBUSDPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMiningPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "badgeContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createMiningPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFarmingBNBPoolReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFarmingBUSDPoolReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateMiningPoolReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRefMiningReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFarmingBNBPoolReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFarmingBUSDPoolReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestMiningPoolReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ico", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastMiningClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFarmingBNBPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFarmingBUSDPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMiningPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmingBNBPool",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmingBUSDPool",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMiningInfo",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBNBPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBUSDPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_FTUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_NFTPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_TokenBNBUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_TokenBUSDUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__FarmingInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFarmingBNBPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFarmingBUSDPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMiningPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMiningPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFarmingBNBPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFarmingBUSDPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateMiningPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRefMiningReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestFarmingBNBPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestFarmingBUSDPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestMiningPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ico", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMiningClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFarmingBNBPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFarmingBUSDPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMiningPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFarmingBNBPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFarmingBUSDPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiningInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBNBPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBUSDPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AddLiquidityBNBPool(address,uint256,uint256)": EventFragment;
    "AddLiquidityBUSDPool(address,uint256,uint256)": EventFragment;
    "AddMiningPool(address,uint256,uint256)": EventFragment;
    "CreateMiningPool(uint256,uint256)": EventFragment;
    "HarvestFarmingBNBPool(address,uint256)": EventFragment;
    "HarvestFarmingBUSDPool(address,uint256)": EventFragment;
    "HarvestMiningReward(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveLiquidityBNBPool(address,uint256,uint256)": EventFragment;
    "RemoveLiquidityBUSDPool(address,uint256,uint256)": EventFragment;
    "RemoveMiningPool(address,uint256,uint256)": EventFragment;
    "SetFarmingBNBPool(uint256,uint256,uint256,uint256)": EventFragment;
    "SetFarmingBUSDPool(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidityBNBPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidityBUSDPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddMiningPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateMiningPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestFarmingBNBPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestFarmingBUSDPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestMiningReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityBNBPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityBUSDPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveMiningPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFarmingBNBPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFarmingBUSDPool"): EventFragment;
}

export type AddLiquidityBNBPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; tokenAmount: BigNumber; bnbAmount: BigNumber }
>;

export type AddLiquidityBNBPoolEventFilter =
  TypedEventFilter<AddLiquidityBNBPoolEvent>;

export type AddLiquidityBUSDPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; tokenAmount: BigNumber; bnbAmount: BigNumber }
>;

export type AddLiquidityBUSDPoolEventFilter =
  TypedEventFilter<AddLiquidityBUSDPoolEvent>;

export type AddMiningPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; nftAmount: BigNumber; poolId: BigNumber }
>;

export type AddMiningPoolEventFilter = TypedEventFilter<AddMiningPoolEvent>;

export type CreateMiningPoolEvent = TypedEvent<
  [BigNumber, BigNumber],
  { nftId: BigNumber; roi: BigNumber }
>;

export type CreateMiningPoolEventFilter =
  TypedEventFilter<CreateMiningPoolEvent>;

export type HarvestFarmingBNBPoolEvent = TypedEvent<
  [string, BigNumber],
  { user: string; tokenAAmount: BigNumber }
>;

export type HarvestFarmingBNBPoolEventFilter =
  TypedEventFilter<HarvestFarmingBNBPoolEvent>;

export type HarvestFarmingBUSDPoolEvent = TypedEvent<
  [string, BigNumber],
  { user: string; tokenAAmount: BigNumber }
>;

export type HarvestFarmingBUSDPoolEventFilter =
  TypedEventFilter<HarvestFarmingBUSDPoolEvent>;

export type HarvestMiningRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; tokenReward: BigNumber; poolId: BigNumber }
>;

export type HarvestMiningRewardEventFilter =
  TypedEventFilter<HarvestMiningRewardEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemoveLiquidityBNBPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; tokenAmount: BigNumber; bnbAmount: BigNumber }
>;

export type RemoveLiquidityBNBPoolEventFilter =
  TypedEventFilter<RemoveLiquidityBNBPoolEvent>;

export type RemoveLiquidityBUSDPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; tokenAmount: BigNumber; bnbAmount: BigNumber }
>;

export type RemoveLiquidityBUSDPoolEventFilter =
  TypedEventFilter<RemoveLiquidityBUSDPoolEvent>;

export type RemoveMiningPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; nftAmount: BigNumber; poolId: BigNumber }
>;

export type RemoveMiningPoolEventFilter =
  TypedEventFilter<RemoveMiningPoolEvent>;

export type SetFarmingBNBPoolEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  { timestamp: BigNumber; rate: BigNumber; decimal: BigNumber; roi: BigNumber }
>;

export type SetFarmingBNBPoolEventFilter =
  TypedEventFilter<SetFarmingBNBPoolEvent>;

export type SetFarmingBUSDPoolEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  { timestamp: BigNumber; rate: BigNumber; decimal: BigNumber; roi: BigNumber }
>;

export type SetFarmingBUSDPoolEventFilter =
  TypedEventFilter<SetFarmingBUSDPoolEvent>;

export interface FarmingPool extends BaseContract {
  contractName: "FarmingPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _FTUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        FTBalance: BigNumber;
        lastUpdate: BigNumber;
        enable: boolean;
      }
    >;

    _NFTPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        NFTId: BigNumber;
        ROI: BigNumber;
        FTBalance: BigNumber;
      }
    >;

    _TokenBNBUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenBalance: BigNumber;
        bnbBalance: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    _TokenBUSDUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenBalance: BigNumber;
        busdBalance: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    __FarmingInit(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    badgeContract(overrides?: CallOverrides): Promise<[string]>;

    busd(overrides?: CallOverrides): Promise<[string]>;

    createMiningPool(
      _nftId: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    estimateFarmingBNBPoolReward(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateFarmingBUSDPoolReward(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateMiningPoolReward(
      _account: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateRefMiningReward(
      _poolId: BigNumberish,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestFarmingBNBPoolReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestFarmingBUSDPoolReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestMiningPoolReward(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ico(overrides?: CallOverrides): Promise<[string]>;

    lastMiningClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refDistributor(overrides?: CallOverrides): Promise<[string]>;

    removeFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFarmingBNBPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFarmingBUSDPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMiningInfo(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenA(overrides?: CallOverrides): Promise<[string]>;

    tokenB(overrides?: CallOverrides): Promise<[string]>;

    tokenBNBPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ROI: BigNumber;
        rate: BigNumber;
        decimal: BigNumber;
        tokenBalance: BigNumber;
        bnbBalance: BigNumber;
      }
    >;

    tokenBUSDPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ROI: BigNumber;
        rate: BigNumber;
        decimal: BigNumber;
        tokenBalance: BigNumber;
        busdBalance: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  _FTUser(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      FTBalance: BigNumber;
      lastUpdate: BigNumber;
      enable: boolean;
    }
  >;

  _NFTPool(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      NFTId: BigNumber;
      ROI: BigNumber;
      FTBalance: BigNumber;
    }
  >;

  _TokenBNBUser(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      tokenBalance: BigNumber;
      bnbBalance: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  _TokenBUSDUser(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      tokenBalance: BigNumber;
      busdBalance: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  __FarmingInit(
    _tokenA: string,
    _tokenB: string,
    _distributor: string,
    _refDistributor: string,
    _badgeContract: string,
    _icoContract: string,
    _busdAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFarmingBNBPool(
    _tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFarmingBUSDPool(
    _tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMiningPool(
    _poolId: BigNumberish,
    _ftAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  badgeContract(overrides?: CallOverrides): Promise<string>;

  busd(overrides?: CallOverrides): Promise<string>;

  createMiningPool(
    _nftId: BigNumberish,
    _roi: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  estimateFarmingBNBPoolReward(overrides?: CallOverrides): Promise<BigNumber>;

  estimateFarmingBUSDPoolReward(overrides?: CallOverrides): Promise<BigNumber>;

  estimateMiningPoolReward(
    _account: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateRefMiningReward(
    _poolId: BigNumberish,
    _reward: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestFarmingBNBPoolReward(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestFarmingBUSDPoolReward(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestMiningPoolReward(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ico(overrides?: CallOverrides): Promise<string>;

  lastMiningClaim(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  refDistributor(overrides?: CallOverrides): Promise<string>;

  removeFarmingBNBPool(
    _tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFarmingBUSDPool(
    _tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMiningPool(
    _poolId: BigNumberish,
    _ftAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFarmingBNBPool(
    _rate: BigNumberish,
    _decimal: BigNumberish,
    _roi: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFarmingBUSDPool(
    _rate: BigNumberish,
    _decimal: BigNumberish,
    _roi: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMiningInfo(
    _tokenA: string,
    _tokenB: string,
    _distributor: string,
    _refDistributor: string,
    _badgeContract: string,
    _icoContract: string,
    _busdAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenA(overrides?: CallOverrides): Promise<string>;

  tokenB(overrides?: CallOverrides): Promise<string>;

  tokenBNBPool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      ROI: BigNumber;
      rate: BigNumber;
      decimal: BigNumber;
      tokenBalance: BigNumber;
      bnbBalance: BigNumber;
    }
  >;

  tokenBUSDPool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      ROI: BigNumber;
      rate: BigNumber;
      decimal: BigNumber;
      tokenBalance: BigNumber;
      busdBalance: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _FTUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        FTBalance: BigNumber;
        lastUpdate: BigNumber;
        enable: boolean;
      }
    >;

    _NFTPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        NFTId: BigNumber;
        ROI: BigNumber;
        FTBalance: BigNumber;
      }
    >;

    _TokenBNBUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenBalance: BigNumber;
        bnbBalance: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    _TokenBUSDUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenBalance: BigNumber;
        busdBalance: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    __FarmingInit(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    badgeContract(overrides?: CallOverrides): Promise<string>;

    busd(overrides?: CallOverrides): Promise<string>;

    createMiningPool(
      _nftId: BigNumberish,
      _roi: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributor(overrides?: CallOverrides): Promise<string>;

    estimateFarmingBNBPoolReward(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFarmingBUSDPoolReward(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateMiningPoolReward(
      _account: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRefMiningReward(
      _poolId: BigNumberish,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestFarmingBNBPoolReward(overrides?: CallOverrides): Promise<void>;

    harvestFarmingBUSDPoolReward(overrides?: CallOverrides): Promise<void>;

    harvestMiningPoolReward(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ico(overrides?: CallOverrides): Promise<string>;

    lastMiningClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    refDistributor(overrides?: CallOverrides): Promise<string>;

    removeFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFarmingBNBPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFarmingBUSDPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMiningInfo(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenA(overrides?: CallOverrides): Promise<string>;

    tokenB(overrides?: CallOverrides): Promise<string>;

    tokenBNBPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ROI: BigNumber;
        rate: BigNumber;
        decimal: BigNumber;
        tokenBalance: BigNumber;
        bnbBalance: BigNumber;
      }
    >;

    tokenBUSDPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ROI: BigNumber;
        rate: BigNumber;
        decimal: BigNumber;
        tokenBalance: BigNumber;
        busdBalance: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddLiquidityBNBPool(address,uint256,uint256)"(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): AddLiquidityBNBPoolEventFilter;
    AddLiquidityBNBPool(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): AddLiquidityBNBPoolEventFilter;

    "AddLiquidityBUSDPool(address,uint256,uint256)"(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): AddLiquidityBUSDPoolEventFilter;
    AddLiquidityBUSDPool(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): AddLiquidityBUSDPoolEventFilter;

    "AddMiningPool(address,uint256,uint256)"(
      user?: null,
      nftAmount?: null,
      poolId?: null
    ): AddMiningPoolEventFilter;
    AddMiningPool(
      user?: null,
      nftAmount?: null,
      poolId?: null
    ): AddMiningPoolEventFilter;

    "CreateMiningPool(uint256,uint256)"(
      nftId?: null,
      roi?: null
    ): CreateMiningPoolEventFilter;
    CreateMiningPool(nftId?: null, roi?: null): CreateMiningPoolEventFilter;

    "HarvestFarmingBNBPool(address,uint256)"(
      user?: null,
      tokenAAmount?: null
    ): HarvestFarmingBNBPoolEventFilter;
    HarvestFarmingBNBPool(
      user?: null,
      tokenAAmount?: null
    ): HarvestFarmingBNBPoolEventFilter;

    "HarvestFarmingBUSDPool(address,uint256)"(
      user?: null,
      tokenAAmount?: null
    ): HarvestFarmingBUSDPoolEventFilter;
    HarvestFarmingBUSDPool(
      user?: null,
      tokenAAmount?: null
    ): HarvestFarmingBUSDPoolEventFilter;

    "HarvestMiningReward(address,uint256,uint256)"(
      user?: null,
      tokenReward?: null,
      poolId?: null
    ): HarvestMiningRewardEventFilter;
    HarvestMiningReward(
      user?: null,
      tokenReward?: null,
      poolId?: null
    ): HarvestMiningRewardEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveLiquidityBNBPool(address,uint256,uint256)"(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): RemoveLiquidityBNBPoolEventFilter;
    RemoveLiquidityBNBPool(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): RemoveLiquidityBNBPoolEventFilter;

    "RemoveLiquidityBUSDPool(address,uint256,uint256)"(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): RemoveLiquidityBUSDPoolEventFilter;
    RemoveLiquidityBUSDPool(
      user?: null,
      tokenAmount?: null,
      bnbAmount?: null
    ): RemoveLiquidityBUSDPoolEventFilter;

    "RemoveMiningPool(address,uint256,uint256)"(
      user?: null,
      nftAmount?: null,
      poolId?: null
    ): RemoveMiningPoolEventFilter;
    RemoveMiningPool(
      user?: null,
      nftAmount?: null,
      poolId?: null
    ): RemoveMiningPoolEventFilter;

    "SetFarmingBNBPool(uint256,uint256,uint256,uint256)"(
      timestamp?: null,
      rate?: null,
      decimal?: null,
      roi?: null
    ): SetFarmingBNBPoolEventFilter;
    SetFarmingBNBPool(
      timestamp?: null,
      rate?: null,
      decimal?: null,
      roi?: null
    ): SetFarmingBNBPoolEventFilter;

    "SetFarmingBUSDPool(uint256,uint256,uint256,uint256)"(
      timestamp?: null,
      rate?: null,
      decimal?: null,
      roi?: null
    ): SetFarmingBUSDPoolEventFilter;
    SetFarmingBUSDPool(
      timestamp?: null,
      rate?: null,
      decimal?: null,
      roi?: null
    ): SetFarmingBUSDPoolEventFilter;
  };

  estimateGas: {
    _FTUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _NFTPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _TokenBNBUser(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _TokenBUSDUser(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    __FarmingInit(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    badgeContract(overrides?: CallOverrides): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<BigNumber>;

    createMiningPool(
      _nftId: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFarmingBNBPoolReward(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFarmingBUSDPoolReward(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateMiningPoolReward(
      _account: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRefMiningReward(
      _poolId: BigNumberish,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestFarmingBNBPoolReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestFarmingBUSDPoolReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestMiningPoolReward(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ico(overrides?: CallOverrides): Promise<BigNumber>;

    lastMiningClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    removeFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFarmingBNBPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFarmingBUSDPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMiningInfo(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBNBPool(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBUSDPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _FTUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _NFTPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _TokenBNBUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _TokenBUSDUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __FarmingInit(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    badgeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createMiningPool(
      _nftId: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateFarmingBNBPoolReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFarmingBUSDPoolReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateMiningPoolReward(
      _account: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateRefMiningReward(
      _poolId: BigNumberish,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestFarmingBNBPoolReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestFarmingBUSDPoolReward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestMiningPoolReward(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ico(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMiningClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFarmingBNBPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFarmingBUSDPool(
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMiningPool(
      _poolId: BigNumberish,
      _ftAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFarmingBNBPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFarmingBUSDPool(
      _rate: BigNumberish,
      _decimal: BigNumberish,
      _roi: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMiningInfo(
      _tokenA: string,
      _tokenB: string,
      _distributor: string,
      _refDistributor: string,
      _badgeContract: string,
      _icoContract: string,
      _busdAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBNBPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBUSDPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
