/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Marketplace {
  export type MarketItemStruct = {
    itemId: BigNumberish;
    nftToken: string;
    tokenId: BigNumberish;
    seller: string;
    owner: string;
    price: BigNumberish;
    paymentToken: string;
    sold: boolean;
    isErc1155: boolean;
  };

  export type MarketItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    boolean,
    boolean
  ] & {
    itemId: BigNumber;
    nftToken: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    paymentToken: string;
    sold: boolean;
    isErc1155: boolean;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  contractName: "Marketplace";
  functions: {
    "buyItem(uint256)": FunctionFragment;
    "delistItem(uint256)": FunctionFragment;
    "feeBasePoints()": FunctionFragment;
    "feeRate()": FunctionFragment;
    "feeWallet()": FunctionFragment;
    "getItemsOnSale()": FunctionFragment;
    "getMyItemsOnSale()": FunctionFragment;
    "itemOnsaleCount()": FunctionFragment;
    "lastFeeUpdate()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBatchItemOnSale(bool,address,uint256[],uint256[],address)": FunctionFragment;
    "placeItemOnSale(bool,address,uint256,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeRate(uint256)": FunctionFragment;
    "setFeeWallet(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBasePoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getItemsOnSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyItemsOnSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "itemOnsaleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBatchItemOnSale",
    values: [boolean, string, BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "placeItemOnSale",
    values: [boolean, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delistItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeBasePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getItemsOnSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyItemsOnSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemOnsaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeBatchItemOnSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeItemOnSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FeeUpdated(uint256,uint256,uint256)": EventFragment;
    "ItemDelist(uint256,address,uint256,address,uint256,address,bool)": EventFragment;
    "ItemOnSale(uint256,address,uint256,address,uint256,address,bool)": EventFragment;
    "ItemSold(uint256,address,uint256,address,address,uint256,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemDelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemOnSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type FeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { oldFeeRate: BigNumber; newFeeRate: BigNumber; lastFeeUpdate: BigNumber }
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export type ItemDelistEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, string, boolean],
  {
    itemId: BigNumber;
    nftToken: string;
    tokenId: BigNumber;
    seller: string;
    price: BigNumber;
    paymentToken: string;
    isErc1155: boolean;
  }
>;

export type ItemDelistEventFilter = TypedEventFilter<ItemDelistEvent>;

export type ItemOnSaleEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, string, boolean],
  {
    itemId: BigNumber;
    nftToken: string;
    tokenId: BigNumber;
    seller: string;
    price: BigNumber;
    paymentToken: string;
    isErc1155: boolean;
  }
>;

export type ItemOnSaleEventFilter = TypedEventFilter<ItemOnSaleEvent>;

export type ItemSoldEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, string, boolean],
  {
    itemId: BigNumber;
    nftToken: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    paymentToken: string;
    isErc1155: boolean;
  }
>;

export type ItemSoldEventFilter = TypedEventFilter<ItemSoldEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Marketplace extends BaseContract {
  contractName: "Marketplace";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delistItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeBasePoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeWallet(overrides?: CallOverrides): Promise<[string]>;

    getItemsOnSale(
      overrides?: CallOverrides
    ): Promise<[Marketplace.MarketItemStructOutput[]]>;

    getMyItemsOnSale(
      overrides?: CallOverrides
    ): Promise<[Marketplace.MarketItemStructOutput[]]>;

    itemOnsaleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastFeeUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBatchItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish[],
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRate(
      _feeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeWallet(
      _feeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delistItem(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeBasePoints(overrides?: CallOverrides): Promise<BigNumber>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeWallet(overrides?: CallOverrides): Promise<string>;

  getItemsOnSale(
    overrides?: CallOverrides
  ): Promise<Marketplace.MarketItemStructOutput[]>;

  getMyItemsOnSale(
    overrides?: CallOverrides
  ): Promise<Marketplace.MarketItemStructOutput[]>;

  itemOnsaleCount(overrides?: CallOverrides): Promise<BigNumber>;

  lastFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBatchItemOnSale(
    _isErc1155: boolean,
    _nftToken: string,
    _tokenId: BigNumberish[],
    _price: BigNumberish[],
    _paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeItemOnSale(
    _isErc1155: boolean,
    _nftToken: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRate(
    _feeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeWallet(
    _feeWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    delistItem(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    feeBasePoints(overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeWallet(overrides?: CallOverrides): Promise<string>;

    getItemsOnSale(
      overrides?: CallOverrides
    ): Promise<Marketplace.MarketItemStructOutput[]>;

    getMyItemsOnSale(
      overrides?: CallOverrides
    ): Promise<Marketplace.MarketItemStructOutput[]>;

    itemOnsaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    lastFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBatchItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish[],
      _paymentToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    placeItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeRate(
      _feeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeWallet(_feeWallet: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeUpdated(uint256,uint256,uint256)"(
      oldFeeRate?: null,
      newFeeRate?: null,
      lastFeeUpdate?: null
    ): FeeUpdatedEventFilter;
    FeeUpdated(
      oldFeeRate?: null,
      newFeeRate?: null,
      lastFeeUpdate?: null
    ): FeeUpdatedEventFilter;

    "ItemDelist(uint256,address,uint256,address,uint256,address,bool)"(
      itemId?: null,
      nftToken?: null,
      tokenId?: null,
      seller?: null,
      price?: null,
      paymentToken?: null,
      isErc1155?: null
    ): ItemDelistEventFilter;
    ItemDelist(
      itemId?: null,
      nftToken?: null,
      tokenId?: null,
      seller?: null,
      price?: null,
      paymentToken?: null,
      isErc1155?: null
    ): ItemDelistEventFilter;

    "ItemOnSale(uint256,address,uint256,address,uint256,address,bool)"(
      itemId?: null,
      nftToken?: null,
      tokenId?: null,
      seller?: null,
      price?: null,
      paymentToken?: null,
      isErc1155?: null
    ): ItemOnSaleEventFilter;
    ItemOnSale(
      itemId?: null,
      nftToken?: null,
      tokenId?: null,
      seller?: null,
      price?: null,
      paymentToken?: null,
      isErc1155?: null
    ): ItemOnSaleEventFilter;

    "ItemSold(uint256,address,uint256,address,address,uint256,address,bool)"(
      itemId?: null,
      nftToken?: null,
      tokenId?: null,
      seller?: null,
      owner?: null,
      price?: null,
      paymentToken?: null,
      isErc1155?: null
    ): ItemSoldEventFilter;
    ItemSold(
      itemId?: null,
      nftToken?: null,
      tokenId?: null,
      seller?: null,
      owner?: null,
      price?: null,
      paymentToken?: null,
      isErc1155?: null
    ): ItemSoldEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delistItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeBasePoints(overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getItemsOnSale(overrides?: CallOverrides): Promise<BigNumber>;

    getMyItemsOnSale(overrides?: CallOverrides): Promise<BigNumber>;

    itemOnsaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    lastFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBatchItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish[],
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRate(
      _feeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeWallet(
      _feeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delistItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeBasePoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItemsOnSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyItemsOnSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemOnsaleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastFeeUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBatchItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish[],
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeItemOnSale(
      _isErc1155: boolean,
      _nftToken: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRate(
      _feeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeWallet(
      _feeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
