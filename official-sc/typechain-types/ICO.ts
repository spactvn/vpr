/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ICO {
  export type EIP712SignatureStruct = {
    deadline: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type EIP712SignatureStructOutput = [
    BigNumber,
    number,
    string,
    string
  ] & { deadline: BigNumber; v: number; r: string; s: string };
}

export interface ICOInterface extends utils.Interface {
  contractName: "ICO";
  functions: {
    "CLAIM_AIRDROP_WITH_SIG_TYPEHASH()": FunctionFragment;
    "__ICOInit(uint256,address,uint256,address,address,address,address)": FunctionFragment;
    "_holder(uint256,address)": FunctionFragment;
    "_icoRound(uint256)": FunctionFragment;
    "_referees(address,uint256)": FunctionFragment;
    "_reference(address)": FunctionFragment;
    "claimAirDropSigNonces(address)": FunctionFragment;
    "claimAirDropWithSig(uint256,(uint256,uint8,bytes32,bytes32),address)": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "deposit(uint256,uint256,address,bool)": FunctionFragment;
    "getAllowance(uint256)": FunctionFragment;
    "getReferal(address)": FunctionFragment;
    "getReferee(address)": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "modifyIcoRound(uint256,uint256,uint256,uint256)": FunctionFragment;
    "openIcoRound(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setICOInfo(uint256,address,uint256,address,address,address,address,address)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawBNB(uint256)": FunctionFragment;
    "withdrawBUSD(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CLAIM_AIRDROP_WITH_SIG_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ICOInit",
    values: [BigNumberish, string, BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_holder",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_icoRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_referees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_reference", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimAirDropSigNonces",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAirDropWithSig",
    values: [BigNumberish, ICO.EIP712SignatureStruct, string]
  ): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getReferal", values: [string]): string;
  encodeFunctionData(functionFragment: "getReferee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyIcoRound",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openIcoRound",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setICOInfo",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBUSD",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_AIRDROP_WITH_SIG_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__ICOInit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_holder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_icoRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_referees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_reference", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAirDropSigNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAirDropWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReferal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReferee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyIcoRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openIcoRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setICOInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBUSD",
    data: BytesLike
  ): Result;

  events: {
    "ClaimAirdrop(address,address,uint256)": EventFragment;
    "ClaimToken(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "ModifyIcoRound(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OpenIcoRound(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimAirdrop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifyIcoRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenIcoRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ClaimAirdropEvent = TypedEvent<
  [string, string, BigNumber],
  { claimer: string; referal: string; amount: BigNumber }
>;

export type ClaimAirdropEventFilter = TypedEventFilter<ClaimAirdropEvent>;

export type ClaimTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { holder: string; roundId: BigNumber; amount: BigNumber }
>;

export type ClaimTokenEventFilter = TypedEventFilter<ClaimTokenEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { holder: string; roundId: BigNumber; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ModifyIcoRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    roundId: BigNumber;
    priceBNB: BigNumber;
    priceBUSD: BigNumber;
    amount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
  }
>;

export type ModifyIcoRoundEventFilter = TypedEventFilter<ModifyIcoRoundEvent>;

export type OpenIcoRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    roundId: BigNumber;
    priceBNB: BigNumber;
    priceBUSD: BigNumber;
    amount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
  }
>;

export type OpenIcoRoundEventFilter = TypedEventFilter<OpenIcoRoundEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ICO extends BaseContract {
  contractName: "ICO";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLAIM_AIRDROP_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    __ICOInit(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _holder(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        amountBNB: BigNumber;
        amountBUSD: BigNumber;
        update: BigNumber;
      }
    >;

    _icoRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        priceBNB: BigNumber;
        priceBUSD: BigNumber;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        deposited: BigNumber;
      }
    >;

    _referees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _reference(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    claimAirDropSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimAirDropWithSig(
      _amount: BigNumberish,
      _sig: ICO.EIP712SignatureStruct,
      _tempRef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deposit(
      _roundId: BigNumberish,
      _amount: BigNumberish,
      _referal: string,
      _isBNB: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllowance(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReferal(_referee: string, overrides?: CallOverrides): Promise<[string]>;

    getReferee(
      _referal: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    modifyIcoRound(
      _roundId: BigNumberish,
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openIcoRound(
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setICOInfo(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CLAIM_AIRDROP_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  __ICOInit(
    _totalSupply: BigNumberish,
    _tokenAddress: string,
    _minAmount: BigNumberish,
    _provider: string,
    _refProvider: string,
    _vault: string,
    _BUSD: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _holder(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      amountBNB: BigNumber;
      amountBUSD: BigNumber;
      update: BigNumber;
    }
  >;

  _icoRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      priceBNB: BigNumber;
      priceBUSD: BigNumber;
      amount: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      deposited: BigNumber;
    }
  >;

  _referees(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _reference(arg0: string, overrides?: CallOverrides): Promise<string>;

  claimAirDropSigNonces(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimAirDropWithSig(
    _amount: BigNumberish,
    _sig: ICO.EIP712SignatureStruct,
    _tempRef: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deposit(
    _roundId: BigNumberish,
    _amount: BigNumberish,
    _referal: string,
    _isBNB: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllowance(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferal(_referee: string, overrides?: CallOverrides): Promise<string>;

  getReferee(_referal: string, overrides?: CallOverrides): Promise<string[]>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  modifyIcoRound(
    _roundId: BigNumberish,
    _priceBNB: BigNumberish,
    _priceBUSD: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openIcoRound(
    _priceBNB: BigNumberish,
    _priceBUSD: BigNumberish,
    _amount: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setICOInfo(
    _totalSupply: BigNumberish,
    _tokenAddress: string,
    _minAmount: BigNumberish,
    _provider: string,
    _refProvider: string,
    _vault: string,
    _BUSD: string,
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBNB(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBUSD(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CLAIM_AIRDROP_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    __ICOInit(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _holder(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        amountBNB: BigNumber;
        amountBUSD: BigNumber;
        update: BigNumber;
      }
    >;

    _icoRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        priceBNB: BigNumber;
        priceBUSD: BigNumber;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        deposited: BigNumber;
      }
    >;

    _referees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _reference(arg0: string, overrides?: CallOverrides): Promise<string>;

    claimAirDropSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAirDropWithSig(
      _amount: BigNumberish,
      _sig: ICO.EIP712SignatureStruct,
      _tempRef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deposit(
      _roundId: BigNumberish,
      _amount: BigNumberish,
      _referal: string,
      _isBNB: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllowance(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferal(_referee: string, overrides?: CallOverrides): Promise<string>;

    getReferee(_referal: string, overrides?: CallOverrides): Promise<string[]>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    modifyIcoRound(
      _roundId: BigNumberish,
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openIcoRound(
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setICOInfo(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBUSD(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimAirdrop(address,address,uint256)"(
      claimer?: null,
      referal?: null,
      amount?: null
    ): ClaimAirdropEventFilter;
    ClaimAirdrop(
      claimer?: null,
      referal?: null,
      amount?: null
    ): ClaimAirdropEventFilter;

    "ClaimToken(address,uint256,uint256)"(
      holder?: null,
      roundId?: null,
      amount?: null
    ): ClaimTokenEventFilter;
    ClaimToken(
      holder?: null,
      roundId?: null,
      amount?: null
    ): ClaimTokenEventFilter;

    "Deposit(address,uint256,uint256)"(
      holder?: null,
      roundId?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(holder?: null, roundId?: null, amount?: null): DepositEventFilter;

    "ModifyIcoRound(uint256,uint256,uint256,uint256,uint256,uint256)"(
      roundId?: null,
      priceBNB?: null,
      priceBUSD?: null,
      amount?: null,
      startTime?: null,
      endTime?: null
    ): ModifyIcoRoundEventFilter;
    ModifyIcoRound(
      roundId?: null,
      priceBNB?: null,
      priceBUSD?: null,
      amount?: null,
      startTime?: null,
      endTime?: null
    ): ModifyIcoRoundEventFilter;

    "OpenIcoRound(uint256,uint256,uint256,uint256,uint256,uint256)"(
      roundId?: null,
      priceBNB?: null,
      priceBUSD?: null,
      amount?: null,
      startTime?: null,
      endTime?: null
    ): OpenIcoRoundEventFilter;
    OpenIcoRound(
      roundId?: null,
      priceBNB?: null,
      priceBUSD?: null,
      amount?: null,
      startTime?: null,
      endTime?: null
    ): OpenIcoRoundEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CLAIM_AIRDROP_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __ICOInit(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _holder(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _icoRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _referees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _reference(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimAirDropSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAirDropWithSig(
      _amount: BigNumberish,
      _sig: ICO.EIP712SignatureStruct,
      _tempRef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _roundId: BigNumberish,
      _amount: BigNumberish,
      _referal: string,
      _isBNB: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllowance(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferal(_referee: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReferee(_referal: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    modifyIcoRound(
      _roundId: BigNumberish,
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openIcoRound(
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setICOInfo(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAIM_AIRDROP_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __ICOInit(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _holder(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _icoRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _referees(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _reference(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAirDropSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAirDropWithSig(
      _amount: BigNumberish,
      _sig: ICO.EIP712SignatureStruct,
      _tempRef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _roundId: BigNumberish,
      _amount: BigNumberish,
      _referal: string,
      _isBNB: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllowance(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferal(
      _referee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferee(
      _referal: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyIcoRound(
      _roundId: BigNumberish,
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openIcoRound(
      _priceBNB: BigNumberish,
      _priceBUSD: BigNumberish,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setICOInfo(
      _totalSupply: BigNumberish,
      _tokenAddress: string,
      _minAmount: BigNumberish,
      _provider: string,
      _refProvider: string,
      _vault: string,
      _BUSD: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBNB(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
